//
//  PaintCodeDemo.m
//
//  Created on 15/06/16.
//  Copyright Â© 2016 V2Solutions. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

@import UIKit;
#import "PaintCodeDemo.h"



@implementation PaintCodeDemo


#pragma mark - Canvas Drawings

//! Star

+ (void)drawStar {
    //! General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //! Star 1
    UIBezierPath *star1 = [UIBezierPath bezierPath];
    [star1 moveToPoint: CGPointMake(115, 177.75)];
    [star1 addLineToPoint: CGPointMake(97.01, 235.54)];
    [star1 addLineToPoint: CGPointMake(97.23, 174.85)];
    [star1 addLineToPoint: CGPointMake(62.79, 224.08)];
    [star1 addLineToPoint: CGPointMake(81.2, 166.43)];
    [star1 addLineToPoint: CGPointMake(33.68, 202.29)];
    [star1 addLineToPoint: CGPointMake(68.48, 153.33)];
    [star1 addLineToPoint: CGPointMake(12.53, 172.3)];
    [star1 addLineToPoint: CGPointMake(60.31, 136.81)];
    [star1 addLineToPoint: CGPointMake(1.42, 137.04)];
    [star1 addLineToPoint: CGPointMake(57.5, 118.5)];
    [star1 addLineToPoint: CGPointMake(1.42, 99.96)];
    [star1 addLineToPoint: CGPointMake(60.31, 100.19)];
    [star1 addLineToPoint: CGPointMake(12.53, 64.7)];
    [star1 addLineToPoint: CGPointMake(68.48, 83.67)];
    [star1 addLineToPoint: CGPointMake(33.68, 34.71)];
    [star1 addLineToPoint: CGPointMake(81.2, 70.57)];
    [star1 addLineToPoint: CGPointMake(62.79, 12.92)];
    [star1 addLineToPoint: CGPointMake(97.23, 62.15)];
    [star1 addLineToPoint: CGPointMake(97.01, 1.46)];
    [star1 addLineToPoint: CGPointMake(115, 59.25)];
    [star1 addLineToPoint: CGPointMake(132.99, 1.46)];
    [star1 addLineToPoint: CGPointMake(132.77, 62.15)];
    [star1 addLineToPoint: CGPointMake(167.21, 12.92)];
    [star1 addLineToPoint: CGPointMake(148.8, 70.57)];
    [star1 addLineToPoint: CGPointMake(196.32, 34.71)];
    [star1 addLineToPoint: CGPointMake(161.52, 83.67)];
    [star1 addLineToPoint: CGPointMake(217.47, 64.7)];
    [star1 addLineToPoint: CGPointMake(169.69, 100.19)];
    [star1 addLineToPoint: CGPointMake(228.58, 99.96)];
    [star1 addLineToPoint: CGPointMake(172.5, 118.5)];
    [star1 addLineToPoint: CGPointMake(228.58, 137.04)];
    [star1 addLineToPoint: CGPointMake(169.69, 136.81)];
    [star1 addLineToPoint: CGPointMake(217.47, 172.3)];
    [star1 addLineToPoint: CGPointMake(161.52, 153.33)];
    [star1 addLineToPoint: CGPointMake(196.32, 202.29)];
    [star1 addLineToPoint: CGPointMake(148.8, 166.43)];
    [star1 addLineToPoint: CGPointMake(167.21, 224.08)];
    [star1 addLineToPoint: CGPointMake(132.77, 174.85)];
    [star1 addLineToPoint: CGPointMake(132.99, 235.54)];
    [star1 addLineToPoint: CGPointMake(115, 177.75)];
    [star1 closePath];
    [star1 moveToPoint: CGPointMake(115, 177.75)];
    CGContextSaveGState(context);
    // Warning: Blur effects are not supported.
    [[UIColor colorWithHue: 0.154 saturation: 0.887 brightness: 0.971 alpha: 1] setFill];
    [star1 fill];
    CGContextSaveGState(context);
    star1.lineWidth = 2;
    CGContextBeginPath(context);
    CGContextAddPath(context, star1.CGPath);
    CGContextEOClip(context);
    [[UIColor colorWithHue: 0.408 saturation: 0.557 brightness: 0.689 alpha: 1] setStroke];
    [star1 stroke];
    CGContextRestoreGState(context);
    CGContextRestoreGState(context);
}

//! random

+ (void)drawRandom {
    //! General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //! Path 1
    UIBezierPath *path1 = [UIBezierPath bezierPath];
    [path1 moveToPoint: CGPointMake(46.09, 85.5)];
    [path1 addCurveToPoint: CGPointMake(143.31, 0) controlPoint1: CGPointMake(139.45, 128.13) controlPoint2: CGPointMake(143.31, 0)];
    [path1 addLineToPoint: CGPointMake(30.1, 25.73)];
    [path1 addCurveToPoint: CGPointMake(46.09, 85.5) controlPoint1: CGPointMake(30.1, 25.73) controlPoint2: CGPointMake(-47.28, 42.88)];
    [path1 closePath];
    [path1 moveToPoint: CGPointMake(46.09, 85.5)];
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, -274.09, -163.11);
    path1.usesEvenOddFillRule = YES;
    [[UIColor colorWithHue: 0.463 saturation: 0.646 brightness: 0.888 alpha: 1] setFill];
    [path1 fill];
    path1.lineWidth = 1;
    [[UIColor colorWithHue: 0.154 saturation: 0.887 brightness: 0.971 alpha: 1] setStroke];
    [path1 stroke];
    CGContextRestoreGState(context);
    
    //! Path 2
    UIBezierPath *path2 = [UIBezierPath bezierPath];
    [path2 moveToPoint: CGPointMake(49.15, 119.96)];
    [path2 addCurveToPoint: CGPointMake(175.86, 175.3) controlPoint1: CGPointMake(60.01, 199.68) controlPoint2: CGPointMake(175.86, 175.3)];
    [path2 addLineToPoint: CGPointMake(246.26, 107.64)];
    [path2 addLineToPoint: CGPointMake(299.22, 10.77)];
    [path2 addLineToPoint: CGPointMake(138.8, 0)];
    [path2 addLineToPoint: CGPointMake(37.46, 28.13)];
    [path2 addLineToPoint: CGPointMake(0, 97.14)];
    [path2 addCurveToPoint: CGPointMake(49.15, 119.96) controlPoint1: CGPointMake(0, 97.14) controlPoint2: CGPointMake(38.29, 40.23)];
    [path2 closePath];
    [path2 moveToPoint: CGPointMake(49.15, 119.96)];
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, -343.72, -199.68);
    path2.lineWidth = 1;
    [[UIColor colorWithHue: 0.805 saturation: 0.93 brightness: 0.879 alpha: 1] setStroke];
    [path2 stroke];
    CGContextRestoreGState(context);
}

//! Icon

+ (void)drawIcon
{
    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPath];
    [oval2Path moveToPoint: CGPointMake(105.65, 43.5)];
    [oval2Path addCurveToPoint: CGPointMake(55.59, 56.97) controlPoint1: CGPointMake(87.51, 43.64) controlPoint2: CGPointMake(69.43, 48.13)];
    [oval2Path addCurveToPoint: CGPointMake(35.44, 96.92) controlPoint1: CGPointMake(38.57, 67.85) controlPoint2: CGPointMake(31.85, 82.81)];
    oval2Path.lineCapStyle = kCGLineCapRound;
    
    [UIColor.grayColor setStroke];
    oval2Path.lineWidth = 9;
    [oval2Path stroke];
    
    
    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(166.1, 48.28)];
    [bezier2Path addCurveToPoint: CGPointMake(166.1, 131.72) controlPoint1: CGPointMake(199.3, 71.32) controlPoint2: CGPointMake(199.3, 108.68)];
    [bezier2Path addCurveToPoint: CGPointMake(89.68, 147.91) controlPoint1: CGPointMake(145.34, 146.13) controlPoint2: CGPointMake(116.5, 151.53)];
    [bezier2Path addCurveToPoint: CGPointMake(43.5, 169.5) controlPoint1: CGPointMake(71.56, 159.66) controlPoint2: CGPointMake(43.5, 169.5)];
    [bezier2Path addCurveToPoint: CGPointMake(58.33, 138.86) controlPoint1: CGPointMake(43.5, 169.5) controlPoint2: CGPointMake(53.16, 153.11)];
    [bezier2Path addCurveToPoint: CGPointMake(45.9, 131.72) controlPoint1: CGPointMake(53.95, 136.8) controlPoint2: CGPointMake(49.78, 134.42)];
    [bezier2Path addCurveToPoint: CGPointMake(45.9, 48.28) controlPoint1: CGPointMake(12.7, 108.68) controlPoint2: CGPointMake(12.7, 71.32)];
    [bezier2Path addCurveToPoint: CGPointMake(166.1, 48.28) controlPoint1: CGPointMake(79.09, 25.24) controlPoint2: CGPointMake(132.91, 25.24)];
    [bezier2Path closePath];
    [UIColor.redColor setStroke];
    bezier2Path.lineWidth = 9;
    [bezier2Path stroke];
}

//! Clock
+ (void)drawClockWithNumbersColor: (UIColor*)numbersColor darkHandsColor: (UIColor*)darkHandsColor lightHandColor: (UIColor*)lightHandColor rimColor: (UIColor*)rimColor tickColor: (UIColor*)tickColor faceColor: (UIColor*)faceColor hours: (CGFloat)hours minutes: (CGFloat)minutes seconds: (CGFloat)seconds
{
    [ClockStyleKit drawClockWithNumbersColor:numbersColor darkHandsColor:darkHandsColor lightHandColor:lightHandColor rimColor:rimColor tickColor:tickColor faceColor:faceColor hours:hours minutes:minutes seconds:seconds];
}

+ (void)drawBubbleButtonWithFrame: (CGRect)frame title: (NSString*)title pressed: (BOOL)pressed
{
    //// Color Declarations
    CGFloat bubbleColorRGBA[4];
    [MyStyleKit.bubbleColor getRed: &bubbleColorRGBA[0] green: &bubbleColorRGBA[1] blue: &bubbleColorRGBA[2] alpha: &bubbleColorRGBA[3]];
    
    UIColor* bubbleFillColor = [UIColor colorWithRed: (bubbleColorRGBA[0] * 0.2 + 0.8) green: (bubbleColorRGBA[1] * 0.2 + 0.8) blue: (bubbleColorRGBA[2] * 0.2 + 0.8) alpha: (bubbleColorRGBA[3] * 0.2 + 0.8)];
    UIColor* color = [UIColor colorWithRed: 1 green: 0.639 blue: 0 alpha: 0.498];
    
    //// Variable Declarations
    UIColor* buttonColor = pressed ? color : bubbleFillColor;
    
    
    //// Subframes
    CGRect frame2 = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 43) * 0.50307 + 0.5), CGRectGetMinY(frame) + CGRectGetHeight(frame) - 27, 43, 22);
    
    
    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 12.2, CGRectGetMinY(frame) + 5.15)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 11.81, CGRectGetMinY(frame) + 5.25)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 6.25, CGRectGetMinY(frame) + 10.81) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 9.23, CGRectGetMinY(frame) + 6.19) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 7.19, CGRectGetMinY(frame) + 8.23)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 5.5, CGRectGetMinY(frame) + 19.79) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 5.5, CGRectGetMinY(frame) + 13.18) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 5.5, CGRectGetMinY(frame) + 15.38)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 5.5, CGRectGetMaxY(frame) - 38.29)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 6.15, CGRectGetMaxY(frame) - 29.7) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 5.5, CGRectGetMaxY(frame) - 33.88) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 5.5, CGRectGetMaxY(frame) - 31.68)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 6.25, CGRectGetMaxY(frame) - 29.31)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 11.81, CGRectGetMaxY(frame) - 23.75) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 7.19, CGRectGetMaxY(frame) - 26.73) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 9.23, CGRectGetMaxY(frame) - 24.69)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.79, CGRectGetMaxY(frame) - 23) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 14.18, CGRectGetMaxY(frame) - 23) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 16.38, CGRectGetMaxY(frame) - 23)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame2) + 34.92, CGRectGetMaxY(frame2) - 18)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame2) + 21.42, CGRectGetMaxY(frame2) - 4.5) controlPoint1: CGPointMake(CGRectGetMinX(frame2) + 28.74, CGRectGetMaxY(frame2) - 11.82) controlPoint2: CGPointMake(CGRectGetMinX(frame2) + 21.42, CGRectGetMaxY(frame2) - 4.5)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame2) + 7.92, CGRectGetMaxY(frame2) - 18) controlPoint1: CGPointMake(CGRectGetMinX(frame2) + 21.42, CGRectGetMaxY(frame2) - 4.5) controlPoint2: CGPointMake(CGRectGetMinX(frame2) + 14.1, CGRectGetMaxY(frame2) - 11.82)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame2) + 0.79, CGRectGetMaxY(frame2) - 18)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 13.2, CGRectGetMaxY(frame) - 23.65) controlPoint1: CGPointMake(CGRectGetMinX(frame2) - 3.62, CGRectGetMaxY(frame2) - 18) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 15.18, CGRectGetMaxY(frame) - 23)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 12.81, CGRectGetMaxY(frame) - 23.75)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 7.25, CGRectGetMaxY(frame) - 29.31) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 10.23, CGRectGetMaxY(frame) - 24.69) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 8.19, CGRectGetMaxY(frame) - 26.73)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 6.5, CGRectGetMaxY(frame) - 38.29) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 6.5, CGRectGetMaxY(frame) - 31.68) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 6.5, CGRectGetMaxY(frame) - 33.88)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 6.5, CGRectGetMinY(frame) + 19.79)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 7.15, CGRectGetMinY(frame) + 11.2) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 6.5, CGRectGetMinY(frame) + 15.38) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 6.5, CGRectGetMinY(frame) + 13.18)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 7.25, CGRectGetMinY(frame) + 10.81)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 12.81, CGRectGetMinY(frame) + 5.25) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 8.19, CGRectGetMinY(frame) + 8.23) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 10.23, CGRectGetMinY(frame) + 6.19)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 21.79, CGRectGetMinY(frame) + 4.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 15.18, CGRectGetMinY(frame) + 4.5) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 17.38, CGRectGetMinY(frame) + 4.5)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.79, CGRectGetMinY(frame) + 4.5)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 12.2, CGRectGetMinY(frame) + 5.15) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 16.38, CGRectGetMinY(frame) + 4.5) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 14.18, CGRectGetMinY(frame) + 4.5)];
    [bezierPath closePath];
    [buttonColor setFill];
    [bezierPath fill];
    [MyStyleKit.bubbleColor setStroke];
    bezierPath.lineWidth = 3;
    [bezierPath stroke];
    
    
    //// Rectangle 4 Drawing
    CGRect rectangle4Rect = CGRectMake(CGRectGetMinX(frame) + 14, CGRectGetMinY(frame) + 13, CGRectGetWidth(frame) - 27, CGRectGetHeight(frame) - 46);
    NSMutableParagraphStyle* rectangle4Style = [NSMutableParagraphStyle new];
    rectangle4Style.alignment = NSTextAlignmentCenter;
    
    NSDictionary* rectangle4FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"AvenirNext-Medium" size: 26], NSForegroundColorAttributeName: MyStyleKit.bubbleColor, NSParagraphStyleAttributeName: rectangle4Style};
    
    [title drawInRect: rectangle4Rect withAttributes: rectangle4FontAttributes];
}

+(void)drawGaugeWithPressure: (CGFloat)pressure
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Color Declarations
    UIColor* strokeColor = [UIColor colorWithRed: 0.437 green: 0.437 blue: 0.437 alpha: 1];
    UIColor* highPressureColor = [UIColor colorWithRed: 0.8 green: 0.32 blue: 0.32 alpha: 1];
    UIColor* lowPressureColor = [UIColor colorWithRed: 0.652 green: 0.8 blue: 0.32 alpha: 1];
    
    //// Variable Declarations
    CGFloat angle = -240 * pressure;
    UIColor* limitingColor = pressure > 0.7 ? highPressureColor : lowPressureColor;
    
    //// Outer Frame Drawing
    UIBezierPath* outerFramePath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(124, 42, 100, 100)];
    [UIColor.whiteColor setFill];
    [outerFramePath fill];
    [strokeColor setStroke];
    outerFramePath.lineWidth = 2;
    [outerFramePath stroke];
    
    
    //// Scale Frame Drawing
    UIBezierPath* scaleFramePath = [UIBezierPath bezierPath];
    [scaleFramePath moveToPoint: CGPointMake(138.49, 112.5)];
    [scaleFramePath addCurveToPoint: CGPointMake(153.5, 56.49) controlPoint1: CGPointMake(127.17, 92.89) controlPoint2: CGPointMake(133.89, 67.81)];
    [scaleFramePath addCurveToPoint: CGPointMake(209.51, 71.5) controlPoint1: CGPointMake(173.11, 45.17) controlPoint2: CGPointMake(198.19, 51.89)];
    [scaleFramePath addCurveToPoint: CGPointMake(209.51, 112.5) controlPoint1: CGPointMake(216.83, 84.19) controlPoint2: CGPointMake(216.83, 99.81)];
    [scaleFramePath addLineToPoint: CGPointMake(197.38, 105.5)];
    [scaleFramePath addCurveToPoint: CGPointMake(197.38, 78.5) controlPoint1: CGPointMake(202.21, 97.15) controlPoint2: CGPointMake(202.21, 86.85)];
    [scaleFramePath addCurveToPoint: CGPointMake(160.5, 68.62) controlPoint1: CGPointMake(189.93, 65.59) controlPoint2: CGPointMake(173.41, 61.16)];
    [scaleFramePath addCurveToPoint: CGPointMake(150.62, 105.5) controlPoint1: CGPointMake(147.59, 76.07) controlPoint2: CGPointMake(143.16, 92.59)];
    [scaleFramePath addLineToPoint: CGPointMake(138.49, 112.5)];
    [scaleFramePath closePath];
    [strokeColor setStroke];
    scaleFramePath.lineWidth = 2;
    [scaleFramePath stroke];
    
    
    //// Display Drawing
    UIBezierPath* displayPath = [UIBezierPath bezierPath];
    [displayPath moveToPoint: CGPointMake(190.02, 129.74)];
    [displayPath addCurveToPoint: CGPointMake(157.98, 129.74) controlPoint1: CGPointMake(179.78, 134.09) controlPoint2: CGPointMake(168.22, 134.09)];
    [displayPath addLineToPoint: CGPointMake(160.72, 123.3)];
    [displayPath addCurveToPoint: CGPointMake(187.28, 123.3) controlPoint1: CGPointMake(169.21, 126.9) controlPoint2: CGPointMake(178.79, 126.9)];
    [displayPath addLineToPoint: CGPointMake(190.02, 129.74)];
    [displayPath closePath];
    [limitingColor setFill];
    [displayPath fill];
    [strokeColor setStroke];
    displayPath.lineWidth = 2;
    [displayPath stroke];
    
    
    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(174, 58)];
    [bezierPath addLineToPoint: CGPointMake(174, 51)];
    [bezierPath moveToPoint: CGPointMake(133, 92)];
    [bezierPath addLineToPoint: CGPointMake(140, 92)];
    [bezierPath moveToPoint: CGPointMake(208, 92)];
    [bezierPath addLineToPoint: CGPointMake(215, 92)];
    [bezierPath moveToPoint: CGPointMake(198.04, 67.96)];
    [bezierPath addLineToPoint: CGPointMake(202.99, 63.01)];
    [bezierPath moveToPoint: CGPointMake(145.01, 63.01)];
    [bezierPath addLineToPoint: CGPointMake(149.96, 67.96)];
    [bezierPath moveToPoint: CGPointMake(205.41, 78.99)];
    [bezierPath addLineToPoint: CGPointMake(211.88, 76.31)];
    [bezierPath moveToPoint: CGPointMake(136.12, 76.31)];
    [bezierPath addLineToPoint: CGPointMake(142.59, 78.99)];
    [bezierPath moveToPoint: CGPointMake(158.31, 54.12)];
    [bezierPath addLineToPoint: CGPointMake(160.99, 60.59)];
    [bezierPath moveToPoint: CGPointMake(187.01, 123.41)];
    [bezierPath addLineToPoint: CGPointMake(189.69, 129.88)];
    [bezierPath moveToPoint: CGPointMake(189.69, 54.12)];
    [bezierPath addLineToPoint: CGPointMake(187.01, 60.59)];
    [bezierPath moveToPoint: CGPointMake(160.99, 123.41)];
    [bezierPath addLineToPoint: CGPointMake(158.31, 129.88)];
    [strokeColor setStroke];
    bezierPath.lineWidth = 2;
    [bezierPath stroke];
    
    
    //// Arrow Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 174, 92);
    CGContextRotateCTM(context, -(angle + 120) * M_PI / 180);
    
    UIBezierPath* arrowPath = [UIBezierPath bezierPath];
    [arrowPath moveToPoint: CGPointMake(-4, 14)];
    [arrowPath addLineToPoint: CGPointMake(-4, 5)];
    [arrowPath addLineToPoint: CGPointMake(-3, -5)];
    [arrowPath addLineToPoint: CGPointMake(-3, -33)];
    [arrowPath addLineToPoint: CGPointMake(0, -37)];
    [arrowPath addLineToPoint: CGPointMake(3, -33)];
    [arrowPath addLineToPoint: CGPointMake(3, -5)];
    [arrowPath addLineToPoint: CGPointMake(4, 5)];
    [arrowPath addLineToPoint: CGPointMake(4, 14)];
    [arrowPath addLineToPoint: CGPointMake(-4, 14)];
    [arrowPath closePath];
    arrowPath.lineJoinStyle = kCGLineJoinRound;
    
    [strokeColor setFill];
    [arrowPath fill];
    [strokeColor setStroke];
    arrowPath.lineWidth = 2;
    [arrowPath stroke];
    
    CGContextRestoreGState(context);
    
    
        // Trial version of PaintCode only generates code for the first 5 shapes.
}

@end
